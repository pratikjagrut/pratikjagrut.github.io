<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Pratik Jagrut</title>
    <link>https://pratikjagrut.dev/tags/programming/</link>
    <description>Recent content in programming on Pratik Jagrut</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 22 Feb 2021 22:20:26 +0530</lastBuildDate><atom:link href="https://pratikjagrut.dev/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang</title>
      <link>https://pratikjagrut.dev/blog/golang/contents/</link>
      <pubDate>Mon, 22 Feb 2021 22:20:26 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/contents/</guid>
      <description>Contents Github Repo   &amp;emsp; &amp;#128279; Reference     Introduction and Installation  &amp;emsp;   First program in Go: Hello World  &amp;emsp;   Variables, data types and constants  &amp;emsp;   Looping Construct  &amp;emsp;   Conditional Statements  &amp;emsp;   Switch Statement  &amp;emsp;   Arrays and Slices  &amp;emsp;   Maps  &amp;emsp;   Range  &amp;emsp;   Functions  &amp;emsp;   Anonymous Function  &amp;emsp;   Closures  &amp;emsp;   Pointers  &amp;emsp;  </description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://pratikjagrut.dev/blog/golang/pointers/</link>
      <pubDate>Sun, 21 Feb 2021 18:28:54 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/pointers/</guid>
      <description>The pointer is a special variable in Golang that stores the memory address of other variables.
Variables are used to store some type of data. All variables are assigned a particular memory where they store data and this memory has a memory address that is in hexadecimal format. The number that starts with 0x is hexadecimal like (0x14 which is equivalent to 20 in decimal). Golang allows us to store this memory address in variables but only pointers will understand that the stored value is pointing to some memory whereas other variables will treat it just as a value.</description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://pratikjagrut.dev/blog/golang/closures/</link>
      <pubDate>Sun, 14 Feb 2021 19:08:25 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/closures/</guid>
      <description>Golang supports anonymous functions which are then used to form closure functions. Anonymous functions are function without any name. Before going any further read about anonymous function .
The closure is a special type of function value which references variable declared outside its body. The purpose of this function is to close over a variable of upper function to form a closure. The function may access and assign to the referenced variables; in this sense, the function is &amp;ldquo;bound&amp;rdquo; to the variables.</description>
    </item>
    
    <item>
      <title>Anonymous Function</title>
      <link>https://pratikjagrut.dev/blog/golang/anonymous_func/</link>
      <pubDate>Sun, 14 Feb 2021 19:07:57 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/anonymous_func/</guid>
      <description>The anonymous function is a feature in Golang which let us define a function without a name. This feature is also called a function literal. This is useful when you want an inline function or to form a closure.
Declaring the anonymous function The syntax is pretty straight forward and much similar to normal function.
func(parameter_list)(return_type){ return }() Parameter list and return type are optional.
() this will invoke the function as soon as it is defined.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://pratikjagrut.dev/blog/golang/functions/</link>
      <pubDate>Tue, 12 Jan 2021 12:36:48 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/functions/</guid>
      <description>A function is a block of statements which performs a specific task. Functions is a well organized and reusable code. It improves the code readability, maintainability and testability. The general function is:
func function_name( [parameter list] ) [return_types] { body of the function } Declaring and calling functions The function is declared using func keyword.
func sayCheeze() { fmt.Println(&amp;quot;Cheeeeeeeeeeeeze&amp;quot;) } Calling the function is pretty easy.
sayCheeze() You may pass input parameters func addition(i int, j int) { fmt.</description>
    </item>
    
    <item>
      <title>Range</title>
      <link>https://pratikjagrut.dev/blog/golang/range/</link>
      <pubDate>Mon, 11 Jan 2021 23:41:28 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/range/</guid>
      <description>The range keyword is used to iterate over various data types. It is used in for loops and its return values are dependent on the data types over which we&amp;rsquo;re using range keyword.
Range over slice/array Range on Array and Slice returns the first value as an index and second value as an element located at that index.
nums := []int{1, 2, 3, 4, 5} for i, v := range nums{ fmt.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>https://pratikjagrut.dev/blog/golang/maps/</link>
      <pubDate>Sun, 10 Jan 2021 16:38:32 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/maps/</guid>
      <description>The map is a collection of key-value pairs. It is an implementation of a Hash Table, which provides Create/Add, Read, Update and Delete operations over the data. Collection of key-value pairs is unordered and each key is unique.
Declaration and initialization In general GO map looks like
map[KeyType]ValueType The KeyType could be anything that is comparable such as string, int etc. and ValueType could be anything, even it can be another map.</description>
    </item>
    
    <item>
      <title>Arrays and Slices</title>
      <link>https://pratikjagrut.dev/blog/golang/array_slice/</link>
      <pubDate>Tue, 22 Dec 2020 16:08:06 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/array_slice/</guid>
      <description>Array The array is a collection of the same type of element in a contiguous memory location. The array has fixed length i.e the number of elements to be stored is fixed before memory allocation.
Array Declarations An array type definition specifies length and type of element. The array [n]T is of length n and type T.
// This array can hold 3 integers. var i [3]int Arrays can be indexed in usual way, to access the n&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; element we can do a[n].</description>
    </item>
    
    <item>
      <title>Switch</title>
      <link>https://pratikjagrut.dev/blog/golang/switch/</link>
      <pubDate>Tue, 22 Dec 2020 14:35:42 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/switch/</guid>
      <description>A switch statement is another way to write a sequence of if - else statements.
Go&amp;rsquo;s switch is like the one in C and C++ except that it only runs the selected case, not all the cases that follows so we don&amp;rsquo;t need break statement here.
switch expression { case exp1: //Executes if expression matches exp1 case exp2: //Executes if expression matches exp2 default: //Executes if expression does not matches with any case } Switch evaluation order Switch cases evaluate cases from top to bottom and stops when a case succeeds.</description>
    </item>
    
    <item>
      <title>Conditional Statements</title>
      <link>https://pratikjagrut.dev/blog/golang/if_else/</link>
      <pubDate>Mon, 21 Dec 2020 22:18:32 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/if_else/</guid>
      <description>Conditional Statements are part of every programming language. They help us to decide which instruction is suppose to run when certain condition is met. e.g. If I&amp;rsquo;m hungry then I&amp;rsquo;ll eat else I&amp;rsquo;ll wait. e.g. If score is greater than 35%, you passed, else you failed.
If statement in Go if condition/expression { //instruction to be performed } Condition needs to be true to perform the given set of instructions.</description>
    </item>
    
    <item>
      <title>Looping Construct</title>
      <link>https://pratikjagrut.dev/blog/golang/for_loop/</link>
      <pubDate>Mon, 21 Dec 2020 19:34:10 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/for_loop/</guid>
      <description>Go has only one looping construct, the for loop.
Basic for loop The basic for loop has three components separated by semicolons:
 init statement: i := 0 exec before 1st iteration condition expression: i &amp;lt; n eval on every interation post statement: i++ exec after each iteration  The expression is not surrounded by parentheses ( ) but the braces { } around set of instructions are required.
for i := 0; i &amp;lt; n; i++ { //business logic //set of instructions } Init and post statement are optional.</description>
    </item>
    
    <item>
      <title>Variables, data types and constants</title>
      <link>https://pratikjagrut.dev/blog/golang/vdc/</link>
      <pubDate>Sun, 20 Dec 2020 18:34:48 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/vdc/</guid>
      <description>Variable Variable is a symbolic name given to the storage location which contains some value which can be changed at any time during the execution of the program. A variable must be defined with the type of data or value it is holding.
Data types There are several data types in Go.
bool int uint float32 complex64 string int8 uint8 float64 complex128 byte int16 uint16 rune int32 uint32 error int64 uint64 Zero value In some programming languages variable holds a null or undefined value when not initialized, Go gives it a zero-value of its data type.</description>
    </item>
    
    <item>
      <title>Classic hello world program</title>
      <link>https://pratikjagrut.dev/blog/golang/helloworld/</link>
      <pubDate>Sat, 19 Dec 2020 21:48:51 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/helloworld/</guid>
      <description>First thing, packages In Go, source files are organized into system directories called packages, which enable code reusability. When you build reusable pieces of code, you will develop a package as a shared library. But when you develop executable programs, you will use the package main for making the package as an executable program. The package main tells the Go compiler that the package should compile as an executable program instead of a shared library.</description>
    </item>
    
    <item>
      <title>Go Introduction and Installation</title>
      <link>https://pratikjagrut.dev/blog/golang/introduction/</link>
      <pubDate>Sat, 19 Dec 2020 17:23:49 +0530</pubDate>
      
      <guid>https://pratikjagrut.dev/blog/golang/introduction/</guid>
      <description>Go is an open-source, statically typed, compiled programing language built by Google. It combines the simplest of both statically typed and dynamically typed languages and provides you with the proper mixture of efficiency and simple programming. It is primarily fitted to building fast, efficient, and reliable server-side or system applications.
Following are some noted features of Go -
 Safety Concurrency Efficient Garbage Collection High-speed compilation Excellent Tooling support  Installing GO Go binary distributions are available for all major operating systems like Linux, Windows, and macOS.</description>
    </item>
    
  </channel>
</rss>
